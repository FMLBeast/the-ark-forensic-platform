name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:coverage
      
    - name: Build frontend
      run: npm run build
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run backend unit tests
      working-directory: ./backend
      run: npm run test:coverage
      
    - name: Run backend integration tests
      working-directory: ./backend
      run: npm run test:integration
      
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
      
    - name: Build frontend
      run: npm run build
      
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true
        
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run backend security audit
      working-directory: ./backend
      run: npm audit --audit-level moderate

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build frontend
      run: npm run build
      
    - name: Build Docker images
      run: |
        docker build -f Dockerfile.frontend -t ark-frontend:${{ github.sha }} .
        docker build -f backend/Dockerfile.backend -t ark-backend:${{ github.sha }} ./backend
        
    - name: Tag Docker images
      run: |
        docker tag ark-frontend:${{ github.sha }} ark-frontend:latest
        docker tag ark-backend:${{ github.sha }} ark-backend:latest

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Build and start services
      run: |
        npm run build
        npm run preview &
        cd backend && npm start &
        sleep 30
        
    - name: Run basic load test
      run: |
        curl -f http://localhost:4173 || exit 1
        curl -f http://localhost:3001/health || exit 1